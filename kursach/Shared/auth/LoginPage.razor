@page "/login"
@using DBManager.Models.UserModels
@using System.Text;
@using utils;
@layout AuthLayout
@inject NavigationManager NavigationManager
@inject UserController userController
@inject AuthenticationStateProvider authenticationStateProvider

<PageTitle>
    Авторизация
</PageTitle>

<div>
    <h4 class="header">Авторизация</h4>

    <div class="input-group mb-3">
        <span class="input-group-text w-25" id="Login">Login</span>
        <input type="text" class="form-control" aria-describedby="Login" @bind-value="Login">
    </div>

    <div class="input-group mb-3">
        <span class="input-group-text w-25" id="Password">Password</span>
        <input type="password" class="form-control" aria-describedby="Password" @bind-value="Password">
    </div>

    @if (FormError)
    {
        <div class="error">Не верный email или пароль</div>
    }

    <a class="registration" href="/registration">Регистрация</a>

    <br />

    <button type="button" class="btn btn-primary mb-4 button" @onclick="Auth">Войти</button>
</div>


@code {
    private bool FormError { get; set; } = false;

    private String Login { get; set; } = "";

    private String Password { get; set; } = "";

    private bool Validate()
    {
        if (this.Login == "") return false;
        if (this.Password == "") return false;

        return true;
    }

    private async void Auth()
    {
        if (!Validate())
        {
            FormError = true;
            return;
        }

        String passHash = utils.Utils.sha256_hash(this.Password);

        var user = userController.GetUserByLoginPass(this.Login, passHash);

        if(user == null)
        {
            FormError = true;
            return;
        }

        authenticationStateProvider = new CustomAuthStateProvider(user);
        await authenticationStateProvider.GetAuthenticationStateAsync();

        NavigationManager.NavigateTo("/");
    }
}