@page "/present"
@using kursach.DBManager.Models.ItemsModels;
@using kursach.DBManager.Models.ItemModels;
@using kursach.DBManager.Models.SubsidiaryModels;
@inject ItemsController itemsController;
@inject Blazored.LocalStorage.ILocalStorageService iLocalStorageService
@inject ItemsInCartController itemsInCartController;

<PageTitle>Подарки</PageTitle>

<h3>Подарки</h3>

<div class="container">
    @if (items is not null)
    {
        @foreach (var item in items)
        {
            <div class="item_box">
                <div class="image_container mb-1">
                    <img class="image" src="@(string.Format("data:image/jpg;base64,{0}", Convert.ToBase64String(item.Image)))" />
                </div>
                <div>@item.Name</div>
                <button @onclick="@(()=>AddToCard(item))" class="btn btn-success">В корзину</button>
            </div>
        }
    }
</div>

<NavLink href="/cart">
    <div class="cart_item">
        <span class="oi oi-cart" />
        <div class="cart_items_count">@CountItemsInCart</div>
    </div>
</NavLink>

@code {
    private Item[] items { get; set; }
    private int CountItemsInCart { get; set; } = 0;

    private List<Item> ItemsInCart { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            Subsidiary sub = await iLocalStorageService.GetItemAsync<Subsidiary>("subsidiary");
            items = await itemsController.GetItems("Подарки", sub);
        }
        catch (Exception e) { }

        ItemsInCart = itemsInCartController.GetItemsFromCart();
        if (ItemsInCart != null)
        {
            CountItemsInCart = ItemsInCart.Count;
        }
    }

    private async void AddToCard(Item item)
    {
        ItemsInCart = itemsInCartController.AddItemsToCart(item);

        CountItemsInCart = ItemsInCart.Count;
    }
}
